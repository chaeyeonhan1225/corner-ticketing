# Generated by Django 5.0.6 on 2024-07-15 07:49

import django.db.models.deletion
import enumfields.fields
import ticket.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=40, verbose_name="이벤트 타이틀")),
                ("subtitle", models.CharField(max_length=80, verbose_name="이벤트 서브타이틀")),
                (
                    "type",
                    enumfields.fields.EnumField(
                        default="CONCERT", enum=ticket.models.EventType, max_length=20, verbose_name="이벤트 타입"
                    ),
                ),
            ],
            options={
                "verbose_name": "이벤트",
                "db_table": "event",
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("started_at", models.DateTimeField(blank=True, null=True, verbose_name="공연/경기 입장시간")),
                ("ended_at", models.DateTimeField(blank=True, null=True, verbose_name="공연/경기 퇴장시간")),
                (
                    "status",
                    enumfields.fields.EnumField(
                        default="READY", enum=ticket.models.TicketState, max_length=20, verbose_name="티켓 상태"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ticket.event", verbose_name="공연/경기 ID"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TicketInventory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("quantity", models.IntegerField(verbose_name="수량")),
                ("ticket", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ticket.ticket")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TicketInventoryHistory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("before", models.JSONField(blank=True, null=True, verbose_name="수정 전")),
                ("after", models.JSONField(null=True, verbose_name="수정 후")),
                (
                    "inventory",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ticket.ticketinventory"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserTicket",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "status",
                    enumfields.fields.EnumField(
                        default="NOT_USED", enum=ticket.models.UserTicketState, max_length=20, verbose_name="티켓 상태"
                    ),
                ),
                ("used_at", models.DateTimeField(null=True, verbose_name="사용 시간")),
                ("canceled_at", models.DateTimeField(null=True, verbose_name="취소 시간")),
                ("transferred_at", models.DateTimeField(null=True, verbose_name="선물 시간")),
                (
                    "giver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="giver",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="선물 해준 유저",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owner",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="티켓 소유 유저",
                    ),
                ),
                ("ticket", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ticket.ticket")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserTicketHistory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("before", models.JSONField(blank=True, null=True, verbose_name="수정 전")),
                ("after", models.JSONField(null=True, verbose_name="수정 후")),
                (
                    "user_ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ticket.userticket", verbose_name="유저 티켓"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
